```{r}
#| label: inc-tenure-data
#| eval: false

library(tidyverse)
library(tidycensus)
library(fredr)
library(lubridate)

# Use the fredR package to get Consumer Price Index for All Urban Consumers from
# FRED. The CPI will be used to adjust median household income for inflation.

cpi <- fredr(
  series_id = "CPIAUCSL" # ID for CPI for All Urban Consumers
) |> 
  select(date, value) |> # Select date and CPI
  mutate(date = as.Date(date), # Convert date to date data type.
         value = as.numeric(value), # Convert CPI to a numeric value.
         year = year(date)) |> # Create a field for the year and extract year from date.
  group_by(year) |> # Group by year. 
  summarise(index = mean(value)) # Calculate annual average CPI. 

# Create a function to convert median household income from ACS to most recent 
# inflation-adjusted dollar value.
adjustment <- function(x) {
  transform(x, adjusted = ((270.97142/index)*estimate))
}


# Create object for years needed. 
years <- 2010:2021

#  B25119: Median Household Income by Tenure

# Load variable names for B25119 and clean at the same time.

b25119_vars <- load_variables(2021, "acs5") |> 
  filter(str_sub(name, end = 6) == "B25119")|> 
  separate(label, into = c("est", "medincome", "total", "tenure"), sep = "!!") |> 
  select(variable = name, tenure) |>
  mutate(tenure = case_when(
    tenure == "Owner occupied (dollars)" ~ "Homeowner",
    tenure == "Renter occupied (dollars)" ~ "Renter",
    TRUE ~ "All households"
  ))

# Median household income cannot be aggregated so you have to 
# pull data for each geographic level.

b25119_state <- map_dfr(years, function(yr){
  acs_pull <- get_acs(
    geography = "state",
    table = "B25119",
    survey = "acs5",
    year = yr
  ) |> 
    mutate(year = yr) |> 
    left_join(b25119_vars, by = "variable") |> 
    select(variable, year, state = NAME, fips = GEOID, tenure, estimate, moe)
})

b25119_cbsa <- map_dfr(years, function(yr){
  acs5_pull <- get_acs(
    geography = "metropolitan statistical area/micropolitan statistical area",
    table = "B25119",
    survey = "acs5",
    year = yr
  ) |> 
    mutate(year = yr) |> 
    left_join(b25119_vars, by = "variable") |> 
    select(variable, year, cbsa = NAME, GEOID, tenure,
           estimate, moe) |> 
    filter(str_detect(cbsa, "VA"))
})

b25119_local <- map_dfr(years, function(yr){
  acs_pull <- get_acs(
    geography = "county",
    state = "VA",
    table = "B25119",
    survey = "acs5",
    year = yr
  ) |> 
    mutate(year = yr) |> 
    left_join(b25119_vars, by = "variable") |> 
    select(variable, year, locality = NAME, GEOID, tenure,
           estimate, moe) |> 
    mutate(across(.fns = ~str_remove_all(.x, ", Virginia")),
           year = as.numeric(year),
           estimate = as.numeric(estimate))
})


med_inc_state <- b25119_state |> 
  left_join(cpi, by = "year") |> 
  adjustment() |> 
  select(state, year, tenure, estimate, moe, adjusted) 

med_inc_cbsa <- b25119_cbsa |> 
  left_join(cpi, by = "year") |> 
  adjustment() |> 
  select(GEOID, cbsa, year, tenure, estimate, moe, adjusted)

med_inc_local <- b25119_local |> 
  left_join(cpi, by = "year") |> 
  adjustment() |> 
  select(locality, year, tenure, estimate, moe, adjusted) 



write_rds(med_inc_state, "shiny/med_inc_tenure/b25119_state.rds")
write_rds(med_inc_cbsa, "shiny/med_inc_tenure/b25119_cbsa.rds")
write_rds(med_inc_local, "shiny/med_inc_tenure/b25119_local.rds")

```


```{r}
#| label: inc-age-data
#| eval: false

library(tidyverse)
library(tidycensus)
library(fredr)
library(lubridate)

# Use the fredR package to get Consumer Price Index for All Urban Consumers from
# FRED. The CPI will be used to adjust median household income for inflation.

cpi <- fredr(
  series_id = "CPIAUCSL" # ID for CPI for All Urban Consumers
) |> 
  select(date, value) |> # Select date and CPI
  mutate(date = as.Date(date), # Convert date to date data type.
         value = as.numeric(value), # Convert CPI to a numeric value.
         year = year(date)) |> # Create a field for the year and extract year from date.
  group_by(year) |> # Group by year. 
  summarise(index = mean(value)) # Calculate annual average CPI. 

# Create a function to convert median household income from ACS to most recent 
# inflation-adjusted dollar value.
adjustment <- function(x) {
  transform(x, adjusted = ((270.97142/index)*estimate))
}

# Create object for years.

years <- 2010:2021

# Get variables for Table B19049 and clean the variables.

b19049_vars <- load_variables(2021, "acs5") %>%
  filter(str_sub(name, end = 6) %in% "B19049")

b19049_vars_cleaned <- b19049_vars %>%
  separate(label, c("estimate", "medhhincome", "total", "age"), sep = "!!") %>%
  select(variable = name, medhhincome, age) %>%
  mutate(across(.fns = ~replace_na(.x, "All")),
         across(.fns = ~str_remove_all(.x, ":")),
         across(.fns =~ str_remove_all(.x, "in the past 12 months  \\(\\in 2021 inflation-adjusted dollars\\)\\ --")),
         across(.fns = ~str_remove_all(.x, "Householder ")),
         age = case_when(
           age == "under 25 years" ~ "24 years and under",
           TRUE ~ age))

# Table B19049 - Median Household Income by Age of Householder

output_b19049_state <- map_dfr(years, function(yr) {
    acs_pull <- get_acs(
      geography = "state",
      table = "B19049",
      year = yr
    ) %>%
    left_join(b19049_vars_cleaned, by = "variable")
    
    acs_rearranged <- acs_pull %>%
      mutate(year = yr) %>%
      select(variable, year, state = NAME, fips = GEOID, medhhincome, age,
             estimate, moe)
    
    acs_rearranged
  })

output_b19049_cbsa <- map_dfr(years, function(yr) {
    acs_pull <- get_acs(
      geography = "metropolitan statistical area/micropolitan statistical area",
      table = "B19049",
      year = yr
    ) %>%
    left_join(b19049_vars_cleaned, by = "variable")
    
    acs_rearranged <- acs_pull %>%
      mutate(year = yr) %>%
      select(variable, year, cbsa = NAME, fips = GEOID, medhhincome, age,
             estimate, moe) %>%
      filter(str_detect(cbsa, "VA"))
    
    acs_rearranged 
  })

output_b19049_locality <- map_dfr(years, function(yr) {
    acs_pull <- get_acs(
      geography = "county",
      state = "VA", 
      table = "B19049",
      year = yr
    ) %>%
    left_join(b19049_vars_cleaned, by = "variable")
    
    acs_rearranged <- acs_pull %>%
      mutate(year = yr) %>%
      select(variable, year, locality = NAME, fips = GEOID, medhhincome, age,
             estimate, moe)
    
    acs_rearranged
  })

output_b19049_state <- output_b19049_state |> 
  left_join(cpi, by = "year") |> 
  adjustment() |> 
  select(state, year, age, moe, estimate, adjusted) |> 
  filter(age != "All")


output_b19049_cbsa <- output_b19049_cbsa |> 
  left_join(cpi, by = "year") |> 
  adjustment() |> 
  select(cbsa, year, age, moe, estimate, adjusted) |> 
  filter(age != "All")

output_b19049_locality <- output_b19049_locality|> 
  left_join(cpi, by = "year") |> 
  adjustment() |> 
  select(locality, year, age, moe, estimate, adjusted) |> 
  mutate(across(.fns = ~str_remove_all(.x, ", Virginia"))) |> 
  filter(age != "All")

write_rds(output_b19049_state, "shiny/med_inc_age/b19049_state.rds")
write_rds(output_b19049_cbsa, "shiny/med_inc_age/b19049_cbsa.rds")
write_rds(output_b19049_locality, "shiny/med_inc_age/b19049_locality.rds")

```

```{r}
#| label: inc-dist-data
#| eval: false

# B25118 - Tenure by Household Income

# Create object for years.

years <- 2010:2021

b25118_vars <- load_variables(2021, "acs5") |> 
  filter(str_sub(name, end = 6) %in% "B25118")

b25118_raw <- map_dfr(years, function(yr){
  b25118_pull <- get_acs(
    geography = "county",
    state = "VA",
    table = "B25118",
    year = yr,
    survey = "acs5",
    cache_table = TRUE
  ) |> 
    mutate(year = yr)
  })

b25118_vars_cleaned <- b25118_vars |> 
  separate(label, into = c("est", "total", "tenure", "income"), sep = "!!") |>  
  select(variable = name, tenure, income) |> 
  mutate(tenure = case_when(
    tenure == "Owner occupied:" ~ "Homeowner",
    tenure == "Renter occupied:" ~ "Renter"
  )) |> 
  drop_na()

b25118_data <- b25118_raw |> 
  right_join(b25118_vars_cleaned, by = "variable") |> 
  select(GEOID, NAME, year, tenure, income, estimate, moe) |> 
  mutate(NAME = str_remove_all(NAME, ", Virginia")) |>
  mutate(income = case_when(
    income == "Less than $5,000" ~ "Less than $15,000",
    income == "$5,000 to $9,999" ~ "Less than $15,000",
    income == "$10,000 to $14,999" ~ "Less than $15,000",
    income == "$15,000 to $19,999" ~ "$15,000 to $24,999",
    income == "$20,000 to $24,999" ~ "$15,000 to $24,999",
    income == "$25,000 to $34,999" ~ "$25,000 to $49,999",
    income == "$35,000 to $49,999" ~ "$25,000 to $49,999",
    income == "$50,000 to $74,999" ~ "$50,000 to $74,999",
    TRUE ~ income
  )) |> 
  group_by(GEOID, NAME, year, tenure, income) |> 
  summarise(estimate = sum(estimate))  

lookup <- read_csv("data/local_lookup.csv") |> # Read in lookup csv
  mutate(fips_full = as.character(fips_full)) |> # Convert numeric GEOID to character in order to complete join
  select(GEOID = fips_full, name_long, cbsa_title) # Simplify data

b25118_data <- b25118_data |> 
  left_join(lookup, by = "GEOID")

write_rds(b25118_data, "shiny/inc_dist_tenure/b25118_data.rds")

```